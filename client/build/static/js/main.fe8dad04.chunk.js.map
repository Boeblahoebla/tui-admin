{"version":3,"sources":["assets/img/TUI_logo_rgb.png","components/spinner/assets/img/spinner.gif","utils/isempty.ts","redux/reducers/authentication/authReducer.ts","redux/reducers/error/errorReducer.ts","redux/reducers/user/userReducer.ts","redux/reducers/index.ts","redux/actions/types.ts","redux/redux-store/store.ts","utils/setAuthToken.ts","redux/actions/authActions.ts","components/navbar/Navbar.tsx","redux/actions/errorActions.ts","components/common/TextFieldGroup.tsx","components/auth/login/Login.tsx","components/auth/register/Register.tsx","redux/actions/userActions.ts","components/admin/UserAdminModal.tsx","components/admin/UserAdminItem.tsx","components/admin/UsersAdminTable.tsx","components/pagination/page-numbers/PageNumberItem.tsx","components/pagination/page-numbers/PageNumberDots.tsx","components/pagination/page-numbers/PageNumbers.tsx","components/pagination/page-controls/PageControlItem.tsx","components/pagination/page-controls/PageControlSearch.tsx","components/pagination/page-controls/PageControls.tsx","components/pagination/Pagination.tsx","components/spinner/Spinner.tsx","components/admin/Admin.tsx","components/users/UserItem.tsx","components/users/UsersTable.tsx","components/users/Users.tsx","components/security/PrivateRoute.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","isEmpty","value","undefined","Object","keys","length","trim","initialAuthState","isAuthenticated","user","initialErrorState","initialUserState","users","loading","combineReducers","auth","state","action","type","payload","error","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","logOutUserAction","dispatch","console","log","localStorage","removeItem","setCurrentUser","decodedUser","connect","props","links","authFunctionality","className","to","onClick","src","navLogo","alt","width","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","clearErrorsAction","TextFieldGroup","name","placeholder","info","onChange","classnames","loginUserAction","userData","history","post","then","res","data","setItem","jwtDecode","push","catch","err","response","useState","email","setEmail","password","setPassword","useHistory","useEffect","window","location","href","onSubmit","e","preventDefault","userLoginData","target","registerUserAction","setName","password2","setPassword2","noValidate","registerUserData","pageNumber","sizeNumber","getAllUsersAction","page","size","setUsersLoadingAction","get","updateUserAction","put","userName","modalOpen","toggleModal","newUserName","setNewUserName","Modal","isOpen","toggle","backdrop","ModalHeader","ModalBody","ModalFooter","deleteUserAction","delete","setModalOpen","removeButton","disabled","height","UsersAdminTable","userAdminItems","map","index","key","_id","PageNumberItem","listItem","pageNumberText","active","selectPage","toString","PageNumberDots","PageNumbers","pages","currentPage","numbersLayout","numberItems","i","Math","round","activePage","generateShortList","middleLeft","middleRight","generateLongList","PageControlItem","control","icon","PageControlSearch","inputEl","useRef","onSearchClick","current","ref","onKeyPress","event","PageControls","decrementPage","incrementPage","setPageEnd","setPageBegin","Pagination","paginationContent","Spinner","spinnerImg","setData","setPage","dataContent","functionalityContent","abs","UserItem","UsersTable","userItems","Component","component","rest","render","routeProps","pathname","from","jwtToken","currentTime","Date","now","exp","ReactDOM","path","Login","Register","Admin","Users","document","getElementById"],"mappings":"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","file":"static/js/main.fe8dad04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TUI_logo_rgb.f45c127c.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.16f44818.gif\";","// Returns true in the following conditions\r\n// * if the value is undfined\r\n// * if its value is 'null'\r\n// * if it is an empty object\r\n// * if it is an empty string\r\n\r\nfunction isEmpty(value:any){\r\n    if(value === undefined || value === null ||\r\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n        (typeof value === 'string' && value.trim().length === 0)) {\r\n            return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default isEmpty;\r\n","// Imports\r\n//////////\r\n\r\nimport { SET_CURRENT_USER } from '../../actions/types';\r\nimport isEmpty from '../../../utils/isempty';\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { ActionType } from \"../types/ReducerTypes\";\r\n\r\n\r\n// Init Auth State\r\n//////////////////\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false,\r\n    user: {}\r\n};\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default function(state = initialAuthState, action:ActionType) {\r\n    switch(action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","// Imports\r\n//////////\r\n\r\nimport {CLEAR_ERRORS, FETCH_ERRORS} from \"../../actions/types\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { ActionType } from \"../types/ReducerTypes\";\r\n\r\n\r\n// Init Error State\r\n////////////////////\r\n\r\nconst initialErrorState = {};\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default function(state = initialErrorState, action:ActionType) {\r\n    switch(action.type) {\r\n        case FETCH_ERRORS:\r\n            return action.payload;\r\n        case CLEAR_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","// Imports\r\n//////////\r\n\r\nimport { GET_ALL_USERS, FETCH_ERRORS, USERS_LOADING } from \"../../actions/types\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { ActionType } from \"../types/ReducerTypes\";\r\n\r\n\r\n// Init Error State\r\n////////////////////\r\n\r\nconst initialUserState = {\r\n    user: null,\r\n    users: null,\r\n    loading: false\r\n};\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default function(state = initialUserState, action:ActionType) {\r\n    switch(action.type) {\r\n        case FETCH_ERRORS:\r\n            return action.payload;\r\n        case USERS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case GET_ALL_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n                loading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","// Imports\r\n//////////\r\n\r\n// Dependencies\r\nimport { combineReducers } from 'redux';\r\n\r\n// Reducers\r\nimport authReducer from \"./authentication/authReducer\";\r\nimport errorReducer from \"./error/errorReducer\";\r\nimport userReducer from \"./user/userReducer\";\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default combineReducers<any>({\r\n    auth: authReducer,\r\n    error: errorReducer,\r\n    user: userReducer\r\n});","// Exports\r\n//////////\r\n\r\n// Errors\r\nexport const FETCH_ERRORS = 'FETCH_ERRORS';\r\nexport const CLEAR_ERRORS = 'FETCH_ERRORS';\r\n\r\n// Users\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const USERS_LOADING = 'USERS_LOADING';\r\nexport const REMOVE_USER_BY_ID = 'REMOVE_USER_BY_ID';\r\n","// Imports\r\n//////////\r\n\r\n// Dependencies\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducer\r\nimport rootReducer from '../reducers/index';\r\n//\r\n// declare global {\r\n//     interface Window {\r\n//         __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n//     }\r\n// }\r\n\r\n\r\n// Redux store\r\n//////////////\r\n\r\n// Initial state variable\r\nconst initialState = {};\r\n\r\n// Assign the Redux middleware\r\nconst middleware = [thunk];\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\n// Create the Redux store for our states\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    // composeEnhancers()\r\n));\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default store;","// imports\r\n//////////\r\n\r\n// Connectivity\r\nimport axios from 'axios';\r\n\r\n\r\n// Set the token as header to all requests\r\n//////////////////////////////////////////\r\n\r\nconst setAuthToken = (token:object) => {\r\n    if(token) {\r\n        // Apply to every request\r\n        axios.defaults.headers.common['Authorization'] = token;\r\n    } else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default setAuthToken;","// Imports\r\n//////////\r\n\r\n// Data functionality\r\nimport axios from 'axios/index';\r\n\r\n// Security\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// Action types\r\nimport { FETCH_ERRORS, SET_CURRENT_USER } from './types';\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { DecodedUserType } from \"../../components/app/types/AppTypes\";\r\nimport { RegisterUserDataType, UserLoginDataType } from \"../../components/auth/types/AuthTypes\";\r\nimport { HistoryType } from \"./types/ActionTypes\";\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\n// Register User Action\r\nexport const registerUserAction = (userData:RegisterUserDataType, history:HistoryType) => (dispatch:any) =>{\r\n    axios\r\n    .post('/api/users/register', userData)\r\n    .then(res => history.push('/login'))\r\n    .catch(err =>\r\n        dispatch({\r\n            type: FETCH_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    );\r\n};\r\n\r\n\r\n// Login user action- Get user token\r\nexport const loginUserAction = (userData:UserLoginDataType, history:HistoryType) => (dispatch:any) => {\r\n    axios.post('/api/users/login', userData)\r\n    .then(res => {\r\n        // Save to localStorage\r\n        const { token } = res.data;\r\n\r\n        // Set token to local storage\r\n        localStorage.setItem('jwtToken', token);\r\n\r\n        // Set token to the Authorization header\r\n        setAuthToken(token);\r\n\r\n        // Decode the token to get the user data\r\n        const decodedUser:DecodedUserType = jwtDecode(token);\r\n\r\n        // Set the current user\r\n        dispatch(setCurrentUser(decodedUser));\r\n\r\n        // Push to the Admin page\r\n        history.push('/admin')\r\n    })\r\n    .catch(err =>\r\n        dispatch({\r\n            type: FETCH_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    )\r\n};\r\n\r\n\r\n// Logout user action\r\nexport const logOutUserAction  = () => (dispatch:any) =>{\r\n\r\n    console.log('logging out user');\r\n\r\n    // Remove the token from local storage\r\n    localStorage.removeItem('jwtToken');\r\n\r\n    // Remove the authHeader for future requests\r\n    setAuthToken({});\r\n\r\n    // Set the current user to an empty object which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n};\r\n\r\n\r\n// Method to set the current user\r\nexport const setCurrentUser = (decodedUser: {}) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decodedUser\r\n    }\r\n};","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { logOutUserAction } from \"../../redux/actions/authActions\";\r\n\r\n// Media\r\nimport navLogo from \"../../assets/img/TUI_logo_rgb.png\";\r\n\r\n// Styling\r\nimport \"./assets/styling/navbar.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxFullState } from \"../../ts-types/reduxStateTypes\";\r\nimport { NavbarPropType } from \"./types/Navbar\";\r\n\r\n\r\n// Navbar component\r\n///////////////////\r\n\r\nconst Navbar = (props: NavbarPropType) => {\r\n\r\n    // Fetch the authentication & the logOutUserAction from the props\r\n    const { auth, logOutUserAction } = props;\r\n\r\n    // Determine the links & functionality\r\n    let links;\r\n    let authFunctionality;\r\n\r\n    // Generate the navbar content according to authentication\r\n    if(auth.isAuthenticated) {\r\n        links = (\r\n            <>\r\n                <li className=\"navbar-item mr-4\">\r\n                    <Link className=\"nav-link\" to=\"/\">Users</Link>\r\n                </li>\r\n                <li className=\"navbar-item mr-4\">\r\n                    <Link className=\"nav-link\" to=\"/admin\">Admin</Link>\r\n                </li>\r\n            </>\r\n        );\r\n        authFunctionality = (\r\n            <>\r\n                <li className=\"navbar-item d-flex align-items-center\">\r\n                    <Link className=\"nav-link\" to=\"#\" onClick={() => logOutUserAction()}>\r\n                        Log out <i className=\"fas fa-sign-out-alt fa-lg ml-2 text-align-center\"/>\r\n                    </Link>\r\n                </li>\r\n            </>\r\n        )\r\n    } else {\r\n        links = (\r\n            <>\r\n                <li className=\"navbar-item mr-4\">\r\n                    <Link className=\"nav-link\" to=\"/\">Users</Link>\r\n                </li>\r\n            </>\r\n        );\r\n        authFunctionality = (\r\n            <>\r\n                <li className=\"navbar-item d-flex align-items-center mr-4\">\r\n                    <Link className=\"nav-link\" to=\"/login\">\r\n                        Login <i className=\"fas fa-sign-in-alt fa-lg ml-2 text-align-center\"/>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"navbar-item d-flex align-items-center\">\r\n                    <Link className=\"nav-link\" to=\"/register\">\r\n                        Register <i className=\"far fa-user fa-lg ml-2 text-align-center\"/>\r\n                    </Link>\r\n                </li>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n\r\n            {/* Tui brand logo */}\r\n            <img className=\"mr-4\" src={navLogo} alt=\"TUI_logo_rgb\" width=\"100px\"/>\r\n\r\n            {/* Navbar toggler */}\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                    aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"/>\r\n            </button>\r\n\r\n            {/* Navigation items */}\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <>\r\n                    <ul className=\"navbar-nav ml-2\">\r\n                        { links }\r\n                    </ul>\r\n                </>\r\n                <div className=\"ml-auto\">\r\n                    <ul className=\"navbar-nav\">\r\n                        { authFunctionality }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\n// Map the Redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { logOutUserAction })(Navbar)","// Imports\r\n//////////\r\n\r\n// Action types\r\nimport { CLEAR_ERRORS } from './types';\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\n// Clear errors action\r\nexport const clearErrorsAction = () => (dispatch:any) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS,\r\n        payload: {}\r\n    })\r\n};","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\n// Prop types for the textField props\r\nimport { TextFieldGroupPropType } from \"./types/TextFieldGroupTypes\"\r\n\r\n\r\n// TextFieldGroup Component\r\n///////////////////////////\r\n\r\nexport const TextFieldGroup = (props:TextFieldGroupPropType) => {\r\n\r\n    // Fetch the fields from the tfProps\r\n    const { name, placeholder, value, error, info, onChange, type } = props;\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n\r\n            {/* CSS input field */}\r\n            <input\r\n                className={ classnames('form-control form-control-lg form-control-auth', {\r\n                    'is-invalid': error\r\n                }) }\r\n                placeholder={placeholder}\r\n                name={name}\r\n                type={type}\r\n                onChange={onChange}\r\n                value={value}\r\n            />\r\n\r\n            { info && (<small className=\"form-text text-muted\">{ info }</small>) }\r\n\r\n            {/* provide the error messages under the input that is not validated */}\r\n            { error && (<div className=\"invalid-feedback\">{ error }</div>) }\r\n        </div>\r\n    )\r\n};","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { loginUserAction } from \"../../../redux/actions/authActions\";\r\nimport { clearErrorsAction } from \"../../../redux/actions/errorActions\";\r\n\r\n// Components\r\nimport { TextFieldGroup } from \"../../common/TextFieldGroup\";\r\n\r\n// Styling\r\nimport \"../assets/styling/auth.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { UserLoginDataType } from \"../types/AuthTypes\";\r\nimport { reduxFullState } from \"../../../ts-types/reduxStateTypes\";\r\n\r\n\r\n// Login component\r\n//////////////////\r\n\r\nconst Login = (props:any) => {\r\n\r\n    // Fetch the clearErrors Redux action from the props\r\n    const { clearErrorsAction } = props;\r\n\r\n    // State handling\r\n    const [ email, setEmail ] = useState(\"\");\r\n    const [ password, setPassword ] = useState(\"\");\r\n\r\n    // Fetch the history\r\n    let history = useHistory();\r\n\r\n    // On submit handler\r\n    const onSubmitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        // Generate the data to login in with\r\n        const userLoginData:UserLoginDataType = {\r\n            email: email,\r\n            password: password\r\n        };\r\n\r\n        // Fire up the loginUserAction with the given data\r\n        props.loginUserAction(userLoginData, history);\r\n    };\r\n\r\n    // When the user is already authenticated go to the admin page\r\n    useEffect(() => {\r\n        if(props.auth.isAuthenticated) {\r\n            window.location.href=\"/admin\";\r\n        }\r\n    }, [props.auth]);\r\n\r\n    // When the component unMounts clear the errors in the Redux state\r\n    useEffect(() => {\r\n        return () => clearErrorsAction();\r\n    },[clearErrorsAction]);\r\n\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <h1 className=\"display-4 text-center auth__header\">Log In</h1>\r\n                        <p className=\"lead text-center auth__lead\">\r\n                            Sign in for administrator access\r\n                        </p>\r\n\r\n                        <p className=\"auth__icon text-center mb-4\"><i className=\"fas fa-user fa-4x\"/></p>\r\n\r\n                        {/* On submit, fire up the onSubmit method*/}\r\n                        <form onSubmit={onSubmitHandler}>\r\n\r\n                            {/* Input textfields using the TextFieldGroup component */}\r\n                            <TextFieldGroup\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Email address\"\r\n                                value={email}\r\n                                error= {props.error.email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n\r\n                            <TextFieldGroup\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                error= {props.error.password}\r\n                                onChange={(e: any) => setPassword(e.target.value)}\r\n                            />\r\n\r\n                            <input type=\"submit\" value=\"Submit\" className=\"btn btn-block btn-auth-submit mt-4\"/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Map the redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth,\r\n    error: state.error\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { loginUserAction, clearErrorsAction })(Login)\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { registerUserAction } from \"../../../redux/actions/authActions\";\r\nimport { clearErrorsAction } from \"../../../redux/actions/errorActions\";\r\n\r\n// Components\r\nimport { TextFieldGroup } from \"../../common/TextFieldGroup\";\r\n\r\n// Styling\r\nimport \"../assets/styling/auth.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { RegisterUserDataType } from \"../types/AuthTypes\";\r\nimport { reduxFullState } from \"../../../ts-types/reduxStateTypes\";\r\n\r\n\r\n// Register component\r\n/////////////////////\r\n\r\nconst Register = (props:any) => {\r\n\r\n    // Fetch the clearErrors Redux Action from the props\r\n    const { clearErrorsAction } = props;\r\n\r\n    // State handling\r\n    const [ name, setName ] = useState(\"\");\r\n    const [ email, setEmail ] = useState(\"\");\r\n    const [ password, setPassword ] = useState(\"\");\r\n    const [ password2, setPassword2 ] = useState(\"\");\r\n\r\n    // Fetch the history\r\n    let history = useHistory();\r\n\r\n    // On submit handler\r\n    const onSubmitHandler = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        // Generate the data to register a user with\r\n        const registerUserData:RegisterUserDataType = {\r\n            name: name,\r\n            email: email,\r\n            password: password,\r\n            password2: password2\r\n        };\r\n\r\n        // Fire up the loginUserAction with the given data\r\n        props.registerUserAction(registerUserData, history);\r\n    };\r\n\r\n    // When the user is already authenticated go to the admin page\r\n    useEffect(() => {\r\n        if(props.auth.isAuthenticated) {\r\n            window.location.href=\"/admin\";\r\n        }\r\n    }, [props.auth]);\r\n\r\n    // When the component unMounts clear the errors in the Redux state\r\n    useEffect(() => {\r\n        return () => clearErrorsAction()\r\n    },[clearErrorsAction]);\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <h1 className=\"display-4 text-center auth__header\">Sign Up</h1>\r\n                        <p className=\"lead text-center auth_lead\"> Sign up as an administrator </p>\r\n\r\n                        <p className=\"auth__icon text-center mb-4\"><i className=\"far fa-user fa-4x\"/></p>\r\n\r\n                        {/* On submit, fire up the onSubmit method */}\r\n                        <form noValidate onSubmit={onSubmitHandler}>\r\n\r\n                            {/* Input textfields using the TextFieldGroup component */}\r\n                            <TextFieldGroup\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                value={name}\r\n                                error={props.error.name}\r\n                                onChange={(e:any) => setName(e.target.value)}\r\n                            />\r\n\r\n                            <TextFieldGroup\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Email address\"\r\n                                value={email}\r\n                                error={props.error.email}\r\n                                onChange={(e:any) => setEmail(e.target.value)}\r\n                            />\r\n\r\n                            <TextFieldGroup\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                error={props.error.password}\r\n                                onChange={(e:any) => setPassword(e.target.value)}\r\n                            />\r\n\r\n                            <TextFieldGroup\r\n                                name=\"password2\"\r\n                                type=\"password\"\r\n                                placeholder=\"Repeat password\"\r\n                                value={password2}\r\n                                error={props.error.password2}\r\n                                onChange={(e:any) => setPassword2(e.target.value)}\r\n                            />\r\n\r\n                            <input type=\"submit\" value=\"Register\" className=\"btn btn-block btn-auth-submit mt-4\"/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Map the redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth,\r\n    error: state.error\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { registerUserAction, clearErrorsAction })(Register)\r\n\r\n\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Data functionality\r\nimport axios from 'axios/index';\r\n\r\n// Action types\r\nimport { GET_ALL_USERS, USERS_LOADING, REMOVE_USER_BY_ID, FETCH_ERRORS } from './types';\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { HistoryType } from \"./types/ActionTypes\";\r\ninterface userUpdateData {\r\n    name: string;\r\n}\r\n\r\n\r\n// Variables\r\n////////////\r\n\r\nlet pageNumber = 0;\r\nlet sizeNumber = 0;\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\n// Register User Action\r\nexport const getAllUsersAction = (page:number, size:number) => (dispatch:any) => {\r\n\r\n    pageNumber = page;\r\n    sizeNumber = size;\r\n\r\n    // Set users loading\r\n    dispatch(setUsersLoadingAction());\r\n\r\n    // Do the request & dispatch the right actions depending on the server response\r\n    axios\r\n        .get(`/api/users/all?pageNo=${pageNumber}&size=${sizeNumber}`)\r\n        .then(res => dispatch({\r\n            type: GET_ALL_USERS,\r\n            payload: res.data\r\n        }))\r\n        .catch(error => dispatch({\r\n            type: GET_ALL_USERS,\r\n            payload:[]\r\n        }))\r\n};\r\n\r\n// Update user action\r\nexport const updateUserAction = (id:string, name:userUpdateData, history:HistoryType) => (dispatch:any) => {\r\n    axios\r\n        .put(`/api/users/${id}`, name)\r\n        .then(res => {\r\n            console.log('success');\r\n            dispatch(getAllUsersAction(pageNumber, sizeNumber));\r\n            history.push('/admin')\r\n        })\r\n        .catch(err =>\r\n            dispatch({\r\n                type: FETCH_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        )\r\n};\r\n\r\n// Delete user action\r\nexport const deleteUserAction = (id:string) => (dispatch:any) => {\r\n\r\n    // Set users loading\r\n    dispatch(setUsersLoadingAction());\r\n\r\n    // Do the request & dispatch the right actions depending on the server response\r\n    axios\r\n        .delete(`/api/users/${id}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REMOVE_USER_BY_ID,\r\n                payload: res.data\r\n            });\r\n\r\n            dispatch(getAllUsersAction(pageNumber, sizeNumber))\r\n        })\r\n        .catch(error => dispatch(getAllUsersAction(pageNumber, sizeNumber)))\r\n};\r\n\r\n\r\n// Set profile loading action\r\nexport const setUsersLoadingAction = () => {\r\n    return {\r\n        type: USERS_LOADING\r\n    }\r\n};","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { updateUserAction } from \"../../redux/actions/userActions\";\r\n\r\n// Components\r\nimport { TextFieldGroup } from \"../common/TextFieldGroup\";\r\n\r\n// ReactStrap\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxFullState } from \"../../ts-types/reduxStateTypes\";\r\n\r\n\r\n// Dead Modal\r\n/////////////\r\n\r\nconst UserAdminModal = (props:any) => {\r\n\r\n    // Fetch the data from the props\r\n    const { userName, email, id, modalOpen, toggleModal, error } = props;\r\n\r\n    // Fetch the history\r\n    let history = useHistory();\r\n\r\n    // State handling\r\n    const [newUserName, setNewUserName] = useState(\"\");\r\n\r\n    // Set the state through the props\r\n    useEffect(() => {\r\n        setNewUserName(props.userName);\r\n        if(modalOpen) {\r\n            toggleModal();\r\n        }\r\n    },[props.userName]);\r\n\r\n    return (\r\n        <Modal isOpen={ modalOpen } toggle={ () => toggleModal(!modalOpen) } backdrop=\"static\">\r\n\r\n            {/* Modal Header */}\r\n            <ModalHeader toggle={ () => toggleModal(!modalOpen) }>\r\n                <span className=\"modalHeader\">Change the username</span>\r\n            </ModalHeader>\r\n\r\n            {/* Modal body */}\r\n            <ModalBody>\r\n                <div className=\"d-flex justify-content-center mb-4\">\r\n                    <img src={`https://robohash.org/${userName}${email}.png`} alt=\"Avatar\" width=\"150px\" className=\"mb-4\"/>\r\n                </div>\r\n\r\n                <TextFieldGroup error={error.name} info=\"Username\" name=\"userName\" placeholder=\"newUserName\" value={newUserName} type=\"text\" onChange={(e) => setNewUserName(e.target.value)} />\r\n            </ModalBody>\r\n\r\n            {/* Modal Footer */}\r\n            <ModalFooter className=\"deadModalButtons\">\r\n                <button className=\"btn btn-info\" onClick={ () => props.updateUserAction(id, {name: newUserName}, history) }>\r\n                    Save\r\n                </button>\r\n                <Link to=\"/admin\" className=\"btn btn-info\" onClick={(e:any) => toggleModal()}>\r\n                    Go back\r\n                </Link>\r\n            </ModalFooter>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n\r\n// Map the redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth,\r\n    error: state.error\r\n});\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default connect(mapStateToProps, { updateUserAction })(UserAdminModal);","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState } from \"react\";\r\n\r\n// Redux\r\nimport { deleteUserAction } from \"../../redux/actions/userActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Components\r\nimport UserAdminModal from \"./UserAdminModal\";\r\n\r\n// Styling\r\nimport './assets/styling/admin.scss'\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { UserAdminItemPropType } from \"./types/UserAdminItem\";\r\nimport { reduxFullState } from \"../../ts-types/reduxStateTypes\";\r\nimport {clearErrorsAction} from \"../../redux/actions/errorActions\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst UserAdminItem = (props: UserAdminItemPropType) => {\r\n\r\n    // Fetch userName & email from the props\r\n    const { userName, email, id, deleteUserAction, auth, clearErrorsAction } = props;\r\n\r\n    // State handling\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    console.log(auth);\r\n\r\n    // Generate the removal functionality according to the logged in user\r\n    const removeButton = (auth.user.email === email)\r\n        ? (\r\n            <button className=\"btn admin__table-data__remove ml-2 mr-2\" disabled>\r\n                <i className=\"far fa-trash-alt\"/>\r\n            </button>\r\n        )\r\n        : (\r\n            <button className=\"btn admin__table-data__remove ml-2 mr-2\" onClick={() => {deleteUserAction(id)}}>\r\n                <i className=\"far fa-trash-alt\"/>\r\n            </button>\r\n        );\r\n\r\n    // Modal toggler\r\n    const toggleModal = () => {\r\n        clearErrorsAction();\r\n        setModalOpen(!modalOpen);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td className=\"align-middle pt-0 pb-2 admin__table-data\">\r\n                    <img src={`https://robohash.org/${userName}${email}.png`} alt=\"Avatar\" height=\"50px\"/>\r\n                </td>\r\n                <td className=\"align-middle admin__table-data\">\r\n                    { userName}\r\n                </td>\r\n                <td className=\"align-middle text-center\">\r\n                    <button className=\"btn admin__table-data__edit ml-2 mr-2\" onClick={() => toggleModal()}>\r\n                        <i className=\"far fa-edit\"/>\r\n                    </button>\r\n\r\n                    { removeButton }\r\n                </td>\r\n            </tr>\r\n\r\n            <UserAdminModal userName={userName} email={email} id={id} modalOpen={modalOpen} toggleModal={toggleModal}/>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n// Map the Redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    user: state.user,\r\n    auth: state.auth\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { deleteUserAction, clearErrorsAction })(UserAdminItem);","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Components\r\nimport UserAdminItem from \"./UserAdminItem\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxSingleUserState } from \"../../ts-types/reduxStateTypes\";\r\nimport { UsersTablePropType } from \"./types/UsersAdminTable\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst UsersAdminTable = (props: UsersTablePropType) => {\r\n\r\n    // Fetch data & auth from the props\r\n    const { data } = props;\r\n\r\n    // Generate the user items\r\n    const userAdminItems = data.map((user:reduxSingleUserState, index:number) => (\r\n        <UserAdminItem\r\n            key={index} email={user.email} userName={user.name} id={user._id}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"mt-4\">\r\n            <table className=\"table table-hover\">\r\n                <thead>\r\n                <tr>\r\n                    {/* Avatar, username & email */}\r\n                    <th className=\"users__table-head\">Avatar</th>\r\n                    <th className=\"users__table-head\">Username</th>\r\n                    <th className=\"users__table-head text-center\">Functionality</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { userAdminItems }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default UsersAdminTable;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { PageNumberItemPropType } from \"./types/PageNumberItemTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageNumberItem = (props: PageNumberItemPropType) => {\r\n\r\n    const { pageNumber, active, selectPage } = props;\r\n\r\n    // Generate the listItem as active or not\r\n    let listItem;\r\n\r\n    // Format the page number correctly\r\n    let pageNumberText;\r\n    if(pageNumber < 10) {\r\n        pageNumberText = `0${pageNumber.toString()}`\r\n    } else {\r\n        pageNumberText = pageNumber.toString()\r\n    }\r\n\r\n    // Choose the right  listItem to return\r\n    if(active) {\r\n        listItem = <li className=\"page-item page-number\">\r\n            <div className=\"page-link page-link--active text-white\" onClick={() => selectPage(pageNumber)}>{pageNumberText}</div></li>\r\n    } else {\r\n        listItem = <li className=\"page-item page-number\"><div className=\"page-link page-link--passive text-secondary\" onClick={() => selectPage(pageNumber)}>{pageNumberText}</div></li>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { listItem }\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageNumberItem;\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageNumberDots = () => {\r\n\r\n    return (\r\n        <li className=\"m-2 text-secondary\">...</li>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageNumberDots;\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Components\r\nimport PageNumberItem from \"./PageNumberItem\";\r\nimport PageNumberDots from \"./PageNumberDots\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport {PageNumbersPropType} from \"./types/PageNumbersTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageNumbers = (props: PageNumbersPropType) => {\r\n\r\n    // Fetch the # pages, currentPage & selectPage function from the props\r\n    const { pages, currentPage, selectPage } = props;\r\n\r\n    // Loop through the pages & create the page numbers\r\n    // Redesign the page numbers according to the current page\r\n    let numbersLayout = <></>;\r\n\r\n    // Functionality to generate a short list\r\n    const generateShortList = () => {\r\n        let numberItems = [];\r\n        for (let i = 1; i <= Math.round(pages); i++ ) {\r\n            const activePage = i === currentPage;\r\n            numberItems.push(<PageNumberItem key={i} pageNumber={i} active={activePage} selectPage={selectPage}/>)\r\n        }\r\n\r\n        numbersLayout = (\r\n            <ul className=\"pagination ml-auto\">\r\n                { numberItems }\r\n            </ul>\r\n        )\r\n    };\r\n\r\n    // Functionality to generate a long list\r\n    const generateLongList = () => {\r\n        let numberItems = [];\r\n        if (currentPage < 8) {\r\n            for (let i = 1; i <= 11; i++) {\r\n                const activePage = i === currentPage;\r\n                numberItems.push(<PageNumberItem key={i} pageNumber={i} active={activePage} selectPage={selectPage}/>)\r\n            }\r\n\r\n            numbersLayout = (\r\n                <ul className=\"pagination ml-auto\">\r\n                    { numberItems }\r\n                    <PageNumberDots />\r\n                    <PageNumberItem key={pages} pageNumber={pages} active={pages === currentPage} selectPage={selectPage} />\r\n\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        if (currentPage >= 8 && (pages - currentPage) >= 7 ) {\r\n            const middleLeft = [];\r\n            for (let i = currentPage - 4; i <= currentPage - 1; i++) {\r\n                const activePage = i === currentPage;\r\n                middleLeft.push(<PageNumberItem key={i} pageNumber={i} active={activePage} selectPage={selectPage}/>)\r\n            }\r\n            const middleRight= [];\r\n            for (let i = currentPage + 1; i <= currentPage + 4; i++) {\r\n                const activePage = i === currentPage;\r\n                middleRight.push(<PageNumberItem key={i} pageNumber={i} active={activePage} selectPage={selectPage}/>)\r\n            }\r\n\r\n            numbersLayout = (\r\n                <ul className=\"pagination ml-auto\">\r\n                    <PageNumberItem key={1} pageNumber={1} active={currentPage === 1} selectPage={selectPage} />\r\n                    <PageNumberDots />\r\n                    { middleLeft }\r\n                    <PageNumberItem key={currentPage} pageNumber={currentPage} active={true} selectPage={selectPage} />\r\n                    { middleRight }\r\n                    <PageNumberDots />\r\n                    <PageNumberItem key={pages} pageNumber={pages} active={pages === currentPage} selectPage={selectPage} />\r\n\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        if (currentPage >= 8 && (pages - currentPage) < 7 ) {\r\n            let numberItems = [];\r\n            for (let i = pages - 10; i <= pages; i++) {\r\n                const activePage = i === currentPage;\r\n                numberItems.push(<PageNumberItem key={i} pageNumber={i} active={activePage} selectPage={selectPage}/>)\r\n            }\r\n\r\n            numbersLayout = (\r\n                <ul className=\"pagination ml-auto\">\r\n                    <PageNumberItem key={1} pageNumber={1} active={currentPage === 1} selectPage={selectPage} />\r\n                    <PageNumberDots />\r\n                    { numberItems }\r\n                </ul>\r\n            )\r\n        }\r\n    };\r\n\r\n    // Display a maximum row of 13 places\r\n    if (pages <= 13) {\r\n        generateShortList();\r\n    } else {\r\n        generateLongList();\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <nav aria-label=\"Page navigation\">\r\n                { numbersLayout }\r\n            </nav>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageNumbers;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { PageControlItemPropType } from \"./types/PageControlItemTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageControlItem = (props: PageControlItemPropType) => {\r\n\r\n    // Fetch the icon-flag & action to be taken from the props\r\n    const { icon, action } = props;\r\n\r\n    // Generate the right icon & attach the action on Click\r\n    let control;\r\n\r\n    if(icon === 'begin') {\r\n        control =  (\r\n            <li className=\"page-item\" onClick={() => action()}>\r\n                <div className=\"page-link\" aria-label=\"begin\">\r\n                    <i className=\"fas fa-fast-backward text-secondary\"/>\r\n                </div>\r\n            </li>\r\n        );\r\n    } else if(icon === 'previous') {\r\n        control = (\r\n            <li className=\"page-item\" onClick={() => action()}>\r\n                <div className=\"page-link\" aria-label=\"previous\">\r\n                    <i className=\"fas fa-backward text-secondary\"/>\r\n                </div>\r\n            </li>\r\n        );\r\n    } else if(icon === 'next') {\r\n        control= (\r\n            <li className=\"page-item\" onClick={() => action()}>\r\n                <div className=\"page-link\" aria-label=\"next\">\r\n                    <i className=\"fas fa-forward text-secondary\"/>\r\n                </div>\r\n            </li>\r\n        );\r\n    } else {\r\n        control = (\r\n            <li className=\"page-item\" onClick={() => action()}>\r\n                <div className=\"page-link\" aria-label=\"end\">\r\n                    <i className=\"fas fa-fast-forward text-secondary\"/>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { control }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageControlItem;\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useRef } from \"react\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { PageControlSearchPropType } from \"./types/PageControlSearchTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageControlSearch = (props: PageControlSearchPropType) => {\r\n\r\n    // Fetch the selectPage function from the props\r\n    const { selectPage } = props;\r\n\r\n    // Issue an empty reference\r\n    const inputEl:any = useRef(null);\r\n\r\n    /******************\r\n     * Event handlers *\r\n     ******************/\r\n\r\n    // On search click handler\r\n    const onSearchClick = () => {\r\n        if(inputEl) {\r\n            if (inputEl.current.value) {\r\n                selectPage(inputEl.current.value);\r\n\r\n                // Clear the input value\r\n                inputEl.current.value = '';\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /*************************\r\n     * End of event handlers *\r\n     *************************/\r\n\r\n    return (\r\n        <li className=\"page-item d-flex ml-2 mr-2\">\r\n            {/* Attach the reference to the input field */}\r\n            <input\r\n                className=\"form-control form-control-sm\"\r\n                type=\"number\"\r\n                placeholder=\"Of ga naar pagina...\"\r\n                ref={inputEl}\r\n                onKeyPress={event => {\r\n                    event.key === 'Enter' && onSearchClick()\r\n                }}\r\n            />\r\n            <button\r\n                className=\"btn btn-sm btn-secondary\"\r\n                onClick={() => onSearchClick()}><i className=\"fas fa-search\"/></button>\r\n        </li>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageControlSearch;\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Components\r\nimport PageControlItem from \"./PageControlItem\";\r\nimport PageControlSearch from \"./PageControlSearch\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { PageControlsPropType } from \"./types/PageControlsTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst PageControls = (props: PageControlsPropType) => {\r\n\r\n    // Fetch the functionality from the props\r\n    const { decrementPage, incrementPage, setPageEnd, setPageBegin, selectPage } = props;\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <nav aria-label=\"Page navigation\">\r\n                <ul className=\"pagination pagination-sm\">\r\n\r\n                    <PageControlItem icon=\"begin\" action={setPageBegin}/>\r\n                    <PageControlItem icon=\"previous\" action={decrementPage}/>\r\n\r\n                    <PageControlSearch selectPage={selectPage}/>\r\n\r\n                    <PageControlItem icon=\"next\" action={incrementPage}/>\r\n                    <PageControlItem icon=\"end\" action={setPageEnd}/>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default PageControls;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Components\r\nimport PageNumbers from \"./page-numbers/PageNumbers\";\r\nimport PageControls from \"./page-controls/PageControls\";\r\n\r\n// Styling\r\nimport \"./assets/styling/pagination.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { PaginationPropType } from \"./types/PaginationTypes\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst Pagination = (props: PaginationPropType) => {\r\n\r\n    // Fetch the properties from the props\r\n    const { data, decrementPage, incrementPage, setPageEnd, setPageBegin, selectPage } = props;\r\n\r\n    // Issue a placeholder for the paginationContent\r\n    let paginationContent = <></>;\r\n\r\n    // Hide the controls when there is no data\r\n    if (!data.data) {\r\n        return (\r\n            <div>{ paginationContent }</div>\r\n        )\r\n    }\r\n\r\n    // Generate the pagination content\r\n    paginationContent = (\r\n        <div className=\"mb-2\">\r\n            <PageNumbers\r\n                currentPage={data.currentPage}\r\n                pages={data.pages}\r\n                selectPage={selectPage}\r\n            />\r\n            <PageControls\r\n                decrementPage={decrementPage}\r\n                incrementPage={incrementPage}\r\n                setPageBegin={setPageBegin}\r\n                setPageEnd={setPageEnd}\r\n                selectPage={selectPage}/>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            { paginationContent }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default Pagination;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Media\r\nimport spinnerImg from \"./assets/img/spinner.gif\";\r\n\r\n// Styling\r\nimport './assets/styling/spinner.scss';\r\n\r\n\r\n// Spinner component\r\n////////////////////\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div>\r\n            <img className=\"spinner\" src={spinnerImg} alt=\"Loading...\"/>\r\n        </div>\r\n    );\r\n};","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\n\r\n// Components\r\nimport UsersAdminTable from \"./UsersAdminTable\";\r\nimport Pagination from \"../pagination/Pagination\";\r\n\r\n// Styling\r\nimport \"./assets/styling/admin.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxFullState, reduxMultipleUserState } from \"../../ts-types/reduxStateTypes\";\r\nimport { AdminPropType } from \"./types/AdminPropTypes\";\r\nimport { Spinner } from \"../spinner/Spinner\";\r\nimport { getAllUsersAction } from \"../../redux/actions/userActions\";\r\n\r\n\r\n// Admin component\r\n//////////////////\r\n\r\nconst Admin = (props: AdminPropType) => {\r\n\r\n    // Fetch user state & getAllUsersAction from the props\r\n    const { getAllUsersAction, user, auth } = props;\r\n\r\n    // Component state\r\n    const [data, setData] = useState<reduxMultipleUserState | undefined>(undefined);\r\n    const [page, setPage] = useState(1);\r\n\r\n    // When the component 'mounts' fetch the data from the backend &\r\n    // fetch the data again when the chosen page changes\r\n    useEffect(() => {\r\n\r\n        getAllUsersAction(page, 5);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [page]);\r\n\r\n\r\n    useEffect(() => {\r\n        if(user.users) {\r\n            setData(user.users)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[user.users]);\r\n\r\n\r\n    /******************\r\n     * Event handlers *\r\n     ******************/\r\n\r\n    // Decrement page handler\r\n    const decrementPage = () => { page > 1 && setPage(page - 1) };\r\n\r\n    // Increment page handler\r\n    const incrementPage = () => { if(data) { page < data.pages && setPage(page + 1) } };\r\n\r\n    // Set first page handler\r\n    const setPageBegin = () => { setPage(1) };\r\n\r\n    // Set last page handler\r\n    const setPageEnd = () => { if(data) { setPage(data.pages) } };\r\n\r\n    // Set page number handler\r\n    const selectPage = (value:number) => {\r\n        if(data) {\r\n            (Math.abs(value) <= data.pages)\r\n                ? setPage(Math.abs(value))\r\n                : setPage(data.pages)\r\n        }\r\n    };\r\n\r\n    /*************************\r\n     * End of Event handlers *\r\n     *************************/\r\n\r\n    let dataContent;\r\n    let functionalityContent;\r\n    if(data) {\r\n        dataContent = <UsersAdminTable data={data.data}/>;\r\n        functionalityContent =\r\n            <Pagination data={data} decrementPage={decrementPage} incrementPage={incrementPage}\r\n                        setPageEnd={setPageEnd} setPageBegin={setPageBegin} selectPage={selectPage}\r\n            />\r\n\r\n    }\r\n    else { dataContent = \"\"; }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row mb-4 mt-4 users\">\r\n                <div className=\"col-md-12\">\r\n                    <h1 className=\"display-3 admin__header\">\r\n                        <span className=\"admin__header__icon mr-4\">\r\n                            <i className=\"fas fa-users-cog\"/>\r\n                        </span>\r\n                            <span className=\"admin__header__title\">\r\n                            Administration\r\n                        </span>\r\n                    </h1>\r\n                    <p className=\"lead text-muted mb-4 users__lead\">Welcome { auth.user.name }</p>\r\n\r\n                    {/* Data content */}\r\n                    { dataContent }\r\n\r\n                    {/* Sow spinner if applicable */}\r\n                    { user.loading && <Spinner /> }\r\n\r\n                    {/* When the data is still loading show a spinner, else show the content */}\r\n                    { functionalityContent }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Map the Redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth,\r\n    user: state.user\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { getAllUsersAction })(Admin);","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { UserItemPropType } from \"./types/UserItem\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst UserItem = (props: UserItemPropType) => {\r\n\r\n    // Fetch userName & email from the props\r\n    const { userName, email } = props;\r\n\r\n    return (\r\n        <tr>\r\n            <td className=\"align-middle pt-0 pb-2 users__table-data\"><img src={`https://robohash.org/${userName}${email}.png`} alt=\"Avatar\" height=\"50px\"/></td>\r\n            <td className=\"align-middle users__table-data\">{ userName} </td>\r\n            <td className=\"align-middle users__table-data\">{ email }</td>\r\n        </tr>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default UserItem;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\n\r\n// Components\r\nimport UserItem from \"./UserItem\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxSingleUserState } from \"../../ts-types/reduxStateTypes\";\r\nimport { UsersTablePropType } from \"./types/UsersTable\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst UsersTable = (props: UsersTablePropType) => {\r\n\r\n    // Fetch data & auth from the props\r\n    const { data } = props;\r\n\r\n    // Generate the user items\r\n    const userItems = data.map((user:reduxSingleUserState, index) => (\r\n        <UserItem\r\n            key={index} email={user.email} userName={user.name}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"mt-4\">\r\n            <table className=\"table table-hover\">\r\n                <thead>\r\n                <tr>\r\n                    {/* Avatar, username & email */}\r\n                    <th className=\"users__table-head\">Avatar</th>\r\n                    <th className=\"users__table-head\">Username</th>\r\n                    <th className=\"users__table-head\">E-mail</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { userItems }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default UsersTable;","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { getAllUsersAction } from \"../../redux/actions/userActions\";\r\n\r\n// Components\r\nimport Pagination from \"../pagination/Pagination\";\r\nimport UsersTable from \"./UsersTable\";\r\nimport { Spinner } from \"../spinner/Spinner\";\r\n\r\n// CSS\r\nimport \"./assets/styling/users.scss\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxFullState, reduxMultipleUserState } from \"../../ts-types/reduxStateTypes\";\r\nimport { UsersPropType } from \"./types/Users\";\r\n\r\n\r\n// Component\r\n////////////\r\n\r\nconst Users = (props: UsersPropType) => {\r\n\r\n    // Fetch user state & getAllUsersAction from the props\r\n    const { getAllUsersAction, user, auth } = props;\r\n\r\n    // Component state\r\n    const [data, setData] = useState<reduxMultipleUserState | undefined>(undefined);\r\n    const [page, setPage] = useState(1);\r\n\r\n    // When the component 'mounts' fetch the data from the backend &\r\n    // fetch the data again when the chosen page changes\r\n    useEffect(() => {\r\n        getAllUsersAction(page, 5);\r\n    }, [getAllUsersAction, page]);\r\n\r\n    // When the users props change as a result of a Redux action, set the state with the fresh data\r\n    useEffect(() => {\r\n        if(user.users) {\r\n            setData(user.users)\r\n        }\r\n    },[user.users]);\r\n\r\n    /******************\r\n     * Event handlers *\r\n     ******************/\r\n\r\n    // Decrement page handler\r\n    const decrementPage = () => { page > 1 && setPage(page - 1) };\r\n\r\n    // Increment page handler\r\n    const incrementPage = () => { if(data) { page < data.pages && setPage(page + 1) } };\r\n\r\n    // Set first page handler\r\n    const setPageBegin = () => { setPage(1) };\r\n\r\n    // Set last page handler\r\n    const setPageEnd = () => { if(data) { setPage(data.pages) } };\r\n\r\n    // Set page number handler\r\n    const selectPage = (value:number) => {\r\n        if(data) {\r\n            (Math.abs(value) <= data.pages)\r\n                ? setPage(Math.abs(value))\r\n                : setPage(data.pages)\r\n        }\r\n    };\r\n\r\n    /*************************\r\n     * End of Event handlers *\r\n     *************************/\r\n\r\n    let dataContent;\r\n    let functionalityContent;\r\n    if(data) {\r\n        dataContent = <UsersTable data={data.data}/>;\r\n        functionalityContent =\r\n            <Pagination data={data} decrementPage={decrementPage} incrementPage={incrementPage}\r\n                        setPageEnd={setPageEnd} setPageBegin={setPageBegin} selectPage={selectPage}\r\n            />\r\n\r\n    }\r\n    else { dataContent = \"\"; }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row mb-4 mt-4 users\">\r\n                <div className=\"col-md-12\">\r\n\r\n                    {/* Component header */}\r\n                    <h1 className=\"display-3 users__header\">\r\n                        <span className=\"users__header__icon mr-4\">\r\n                            <i className=\"fas fa-users\"/>\r\n                        </span>\r\n                        <span className=\"users__header__title\">\r\n                            Users list\r\n                        </span>\r\n                    </h1>\r\n\r\n                    {/* Welcome screen */}\r\n                    { auth && <p className=\"lead text-muted mb-4 users__lead\">Welcome {auth.user.name}</p> }\r\n\r\n                    {/* Data content */}\r\n                    { dataContent }\r\n\r\n                    {/* Sow spinner if applicable */}\r\n                    { user.loading && <Spinner /> }\r\n\r\n                    {/* When the data is still loading show a spinner, else show the content */}\r\n                    { functionalityContent }\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\n// Map the redux state to props\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    user: state.user,\r\n    auth: state.auth\r\n});\r\n\r\n\r\n// Export\r\n/////////\r\n\r\nexport default connect(mapStateToProps, { getAllUsersAction })(Users);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport * as React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { reduxFullState } from \"../../ts-types/reduxStateTypes\";\r\nimport { PrivateRoutePropType } from './types/PrivateRoutePropType'\r\n\r\n\r\n// PrivateRoute component\r\n/////////////////////////\r\n\r\nconst PrivateRoute = (props: PrivateRoutePropType) => {\r\n    const { component: Component, auth, ...rest } = props;\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(routeProps) =>\r\n                auth.isAuthenticated ? (\r\n                    <Component {...routeProps} />\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: '/login',\r\n                            state: { from: routeProps.location }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\n// Map the state as a prop\r\nconst mapStateToProps = (state:reduxFullState) => ({\r\n    auth: state.auth\r\n});\r\n\r\n\r\n// Exports\r\n//////////\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// Redux\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../redux/redux-store/store\";\r\n\r\nimport { logOutUserAction, setCurrentUser } from \"../../redux/actions/authActions\";\r\n\r\n// Components\r\nimport Navbar from \"../navbar/Navbar\";\r\nimport Login from \"../auth/login/Login\";\r\nimport Register from \"../auth/register/Register\";\r\nimport Admin from \"../admin/Admin\";\r\nimport Users from \"../users/Users\";\r\n\r\n// Security\r\nimport jwtDecode from 'jwt-decode';\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport PrivateRoute from '../security/PrivateRoute';\r\n\r\n\r\n// Typing\r\n/////////\r\n\r\nimport { DecodedUserType } from \"./types/AppTypes\";\r\n\r\n\r\n// Verify validity jwt on app load\r\n//////////////////////////////////\r\n\r\n// Check for token\r\nif (localStorage.jwtToken) {\r\n    // Set the token as standard header for requests\r\n    setAuthToken(localStorage.jwtToken);\r\n\r\n    // Decode the token & get user info\r\n    const decodedUser:DecodedUserType = jwtDecode(localStorage.jwtToken);\r\n\r\n    // Set the current user & isAuthenticated\r\n    store.dispatch(setCurrentUser(decodedUser));\r\n\r\n    // Check for expired token\r\n    const currentTime = Date.now() / 1000;\r\n    if (decodedUser.exp < currentTime) {\r\n\r\n        // Start the logOutUserAction from the store\r\n        store.dispatch<any>(logOutUserAction());\r\n\r\n        // Redirect to the login page if token is expired\r\n        window.location.href = \"/login\";\r\n    }\r\n}\r\n\r\n\r\n// App component\r\n////////////////\r\n\r\nexport function App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Provider store={store}>\r\n                <Router>\r\n                    <Navbar />\r\n                    <Switch>\r\n                        <Route path=\"/login\" component={Login} />\r\n                        <Route path=\"/register\" component={Register} />\r\n                        <PrivateRoute path=\"/admin\" component={Admin} />\r\n                        <Route path=\"/\" component={Users} />\r\n                    </Switch>\r\n                </Router>\r\n            </Provider>\r\n        </div>\r\n    );\r\n}","// Imports\r\n//////////\r\n\r\n// Base dependencies\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Components\r\nimport { App } from './components/app/App';\r\n\r\n// Styling\r\nimport './assets/styling/index.scss';\r\n\r\n\r\n// Main render of the app\r\n/////////////////////////\r\n\r\nReactDOM.render(\r\n    <App />, document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}